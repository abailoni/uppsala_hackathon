global:
  offsets: null

#TODO: shape_z, samples+slices, plots

device: cuda

loaders:
  general:
    volume_config:
      rejection_threshold: 0.40
      segmentation:
        affinity_config:
          retain_mask: False # This keep a mask of the valid affinities (not involving the ignore-label)
          retain_segmentation: True # This keeps the label image in the inputs
          ignore_label: 0

    defect_augmentation_config:
        max_contiguous_defected_slices: 2
        p_missing_slice: 0.00
        p_low_contrast: 0.00
        p_deformed_slice: 0.00
        p_artifact_source: 0.0
        deformation_mode: 'compress'
        deformation_strength: 16
        artifact_source:
            min_masking_ratio: .5
            slicing_config:
              window_size: [1, 764, 764]
              stride: [1, 600, 600]
              downsampling_ratio: [1, 1, 1]
            volume_config:
              artifacts:
                path: '$HCI_HOME/datasets/cremi/constantin_data/sample_ABC_padded_20160501.defects.hdf'
                path_in_h5_dataset: 'defect_sections/raw'
                dtype: float32
              alpha_mask:
                path: '$HCI_HOME/datasets/cremi/constantin_data/sample_ABC_padded_20160501.defects.hdf'
                path_in_h5_dataset: 'defect_sections/mask'
            master_config:
              elastic_transform:
                alpha: 2000.
                sigma: 50.

    # Configuration for the master dataset.
    master_config:
      # We might need order 0 interpolation if we have segmentation in there somewhere.
      elastic_transform:
        apply: False
        alpha: 2000.
        sigma: 50.
        order: 0
      random_slides:
        shape_after_slide: [704, 704]   #change to x, y of window size
#        max_misalign: [30, 30]   #change to x, y of window size
        shift_vs_slide_proba: 0.5
        apply_proba: 0.  # TODO: CHANGE!!!
        apply_to: [0]

      random_flip: True

#      crop_after_target:
#        crop_left: [0, 30, 30]
#        crop_right: [0, 30, 30]
      downscale_and_crop:
        replicate_targets: True
        0:
          ds_factor: [1, 2, 2]
          crop_factor: [1, 2, 2]
        1:
          ds_factor: [1, 4, 4]
#          crop_factor: [1, 1, 1]
#          crop_slice: ":,36:-36,36:-36"
#        1:
#          ds_factor: [1, 2, 2]
##          crop_factor: [1, 2, 2]

#          crop_slice: ":, 42:-42, 42:-42"
#        2:
#          ds_factor: [1, 1, 1]
##          crop_factor: [1, 3, 3]
#          crop_slice: ":, 124:-124, 124:-124"

      affinity_config:
        use_dynamic_offsets: True
        global:
          retain_mask: True # This keep a mask of the valid affinities (not involving the ignore-label)
          retain_segmentation: False # This keeps the label image in the inputs
          ignore_label: 0
        0:
          nb_offsets: 1
          allowed_offsets:
            - [0, 1, 2]
            - [0, 1, 2, 3, 8, 16, 24]
            - [0, 1, 2, 3, 8, 16, 24]
          max_offset_range: [1,25,25]
          normalize_offsets: False


    # Specify configuration for the loader
    loader_config:
      # Number of processes to use for loading data. Set to (say) 10 if you wish to
      # use 10 CPU cores, or to 0 if you wish to use the same process for training and
      # data-loading (generally not recommended).
      batch_size: 1
      num_workers: 8
      drop_last: True
      pin_memory: False
      shuffle: True



  train:
    names:
      - A
      - B
      - C

    # Specify how the data needs to be sliced before feeding to the network.
    # We use a 3D sliding window over the dataset to extract patches, which
    # are then fed to the network as batches.
    slicing_config:
      # Sliding window size
      window_size:
        A: &shape [20, 764, 764] # 25
        B: *shape
        C: *shape
      # Sliding window stride
      stride:
        A: &stride [12, 200, 200]
        B: *stride
        C: *stride
      # Data slice to iterate over.
      data_slice:
        A: ':, :, :'
        B: ':, :, :'
#        B: '10:30, :764, 200:964'
        C: ':, :, :'

    # Specify paths to volumes
    volume_config:
      # Raw data
      raw:
        path:
          A: '$HCI_HOME/datasets/cremi/SOA_affinities/sampleA_train.h5'
          B: '$HCI_HOME/datasets/cremi/SOA_affinities/sampleB_train.h5'
          C: '$HCI_HOME/datasets/cremi/SOA_affinities/sampleC_train.h5'
        path_in_file:
          A: 'raw'
          B: 'raw_old'
          C: 'raw'
        dtype: float32
        sigma: 0.025
        padding_mode: "reflect"
        padding: &dataset_padding [[2,2], [100,100], [100,100]]
#        padding: &dataset_padding [[0,0], [0,0], [0,0]]

      # Segmentation
      segmentation:
        path:
          A: '$HCI_HOME/datasets/cremi/SOA_affinities/sampleA_train.h5'
          B: '$HCI_HOME/datasets/cremi/SOA_affinities/sampleB_train.h5'
          C: '$HCI_HOME/datasets/cremi/SOA_affinities/sampleC_train.h5'
        path_in_file:
          A: 'segmentations/groundtruth_fixed'
          B: 'segmentations/groundtruth_fixed_OLD'
          C: 'segmentations/groundtruth_fixed'
        dtype: float32
        padding_mode: "constant"
        padding: *dataset_padding



  val:
    names:
      - C

    slicing_config:
      window_size:
        C: *shape
      stride:
        C: *stride
      data_slice:
        C: '75:, :, :'

    volume_config:
      raw:
        path:
          C: '$HCI_HOME/datasets/cremi/SOA_affinities/sampleC_train.h5'
        path_in_file:
          C: 'raw'
        dtype: float32
        sigma: 0.025
        padding_mode: "reflect"
        padding: *dataset_padding
      segmentation:
        path:
          C: '$HCI_HOME/datasets/cremi/SOA_affinities/sampleC_train.h5'
        path_in_file:
          C: 'segmentations/groundtruth_fixed'
        dtype: float32
        padding_mode: "constant"
        padding: *dataset_padding

# TODO: show second patch, fix merge or heads...?

model:
  embeddingutils.models.unet.SmartAffinitiesFromEmb:
#    loadfrom: "$HCI_HOME/pyCharm_projects/uppsala_hackathon/experiments/cremi/runs/smartAffs_3/checkpoint.pytorch"
    path_model: "$HCI_HOME/pyCharm_projects/uppsala_hackathon/experiments/cremi/runs/IoU_1/checkpoint.pytorch"
    train_backbone: False
    reload_backbone: False
    prediction_indices: [0, 1]
    layers_kwargs:
      out_channels: 128
      kernel_size: [3, 3, 3]
#      dilation: [1, 4, 4]
      dim: 3
      activation: "ReLU"
      num_groups_norm: 16
      normalization: "GroupNorm"



trainer:
  max_epochs: 1000 # basically infinite
  num_targets: 1

  criterion:
    loss_name: "vaeAffs.models.losses.StackedAffinityLoss"
    kwargs:
      loss_type: "Dice" # "MSE"
#        target_index: 1
      precrop_pred: "2:-2,25:-25,25:-25"


  optimizer:
    Adam:
      lr: 0.0001
      weight_decay: 0.0005
      amsgrad: True
#      betas: [0.9, 0.999]

  intervals:
    save_every: [1000, 'iterations']
    validate_every:
      frequency : [100, 'iterations']
      for_num_iterations: 5

  tensorboard:
    log_scalars_every: [1, 'iterations']
    log_images_every: [90, 'iterations']
    log_histograms_every: 'never'
    send_image_at_batch_indices: [0]
    send_image_at_channel_indices: [0]
##    send_volume_at_z_indices: 'mid'
#    split_config_keys: True
#    log_anywhere: ['scalars']

  callbacks:
#    gradients:
#      LogOutputGradients:
#        frequency: 1

    essentials:
      SaveAtBestValidationScore:
        smoothness: 0
        verbose: True
#      GradientClip:
#        clip_value: 1e-3
      SaveModelCallback:
        save_every: 500
      PlotReconstructedCallback:
        plot_every: 100

    scheduling:
      AutoLR:
        monitor: 'validation_loss'
        factor: 0.99
        patience: '100 iterations'
        monitor_while: 'validating'
        monitor_momentum: 0.75
#        cooldown_duration: '50000 iterations'
        consider_improvement_with_respect_to: 'previous'
        verbose: True



firelight:
  affs_from_emb:
    ImageGridVisualizer:

      input_mapping:
        global: [B: ":"] # the mapping specified in 'global' is applied to all keys

      pad_width: 1  # width of the border between images in pixels
      pad_value: .2  # intensity of the border pixels
      upsampling_factor: 2  # the whole grid is upsampled by this factor

      row_specs: ['H', 'S', 'B', 'V']
      column_specs: ['W', 'C', 'D', ]

      # Container visualizers always have the 'visualizers' argument. Its value has to be a list of visualizers
      visualizers:

        #        # visualize raw input
        - IdentityVisualizer:
            input: ['target', index: 0, C: 0, W: "8:-8", H: "8:-8", D: "2:-2"]
            value_range: [0,1]
            cmap: gray_r
#        - IdentityVisualizer:
#            input: ['target', index: 0, C: 1, W: "8:-8", H: "8:-8", D: "2:-2"]
#            value_range: [0,1]
#            cmap: gray
        - IdentityVisualizer:
            input: ['prediction', index: 0,  D: "2:-2"]
            cmap: gray
            value_range: [0,1]
        - IdentityVisualizer:
            input: ['inputs', index: 0, W: "8:-8", H: "8:-8", D: "2:-2"]
            cmap: gray
        - PcaVisualizer:
            input: ['concatenated_embs_0', D: "2:-2"]
        - PcaVisualizer:
            input: ['concatenated_embs_1', D: "2:-2"]




#  pcaEmbeddings_lvl1:
#    ImageGridVisualizer:
#
#      input_mapping:
#        global: [B: ":"] # the mapping specified in 'global' is applied to all keys
#
#      pad_width: 1  # width of the border between images in pixels
#      pad_value: .2  # intensity of the border pixels
#      upsampling_factor: 2  # the whole grid is upsampled by this factor
#
#      row_specs: ['H', 'S', 'B', 'V']
#      column_specs: ['W', 'C', 'D', ]
#
#      # Container visualizers always have the 'visualizers' argument. Its value has to be a list of visualizers
#      visualizers:
#
#        - SegmentationVisualizer:
#            input: ['target', index: 1, C: 0, W: "8:-8", H: "8:-8", D: "2:-2"]
#            background_label: 0
#        #        - IdentityVisualizer:
#        #            input: ['prediction', index: 0, B: 0, D: "1:6", C: 0]
#        #            cmap: gray
#        - IdentityVisualizer:
#            input: ['inputs', index: 1, W: "8:-8", H: "8:-8", D: "2:-2"]
#            cmap: gray
#
##        # visualize raw input
#        - PcaVisualizer:
#            input: ['prediction', index: 2,  D: "2:-2"]
#  pcaEmbeddings_lvl2:
#    ImageGridVisualizer:
#
#      input_mapping:
#        global: [B: ":"] # the mapping specified in 'global' is applied to all keys
#
#      pad_width: 1  # width of the border between images in pixels
#      pad_value: .2  # intensity of the border pixels
#      upsampling_factor: 2  # the whole grid is upsampled by this factor
#
#      row_specs: ['H', 'S', 'B', 'V']
#      column_specs: ['W', 'C', 'D', ]
#
#      # Container visualizers always have the 'visualizers' argument. Its value has to be a list of visualizers
#      visualizers:
#
#        #        # visualize raw input
#        - PcaVisualizer:
#            input: ['prediction', index: 3,  D: "2:-2"]
#
#
#  debug_depth_0:
#    ImageGridVisualizer:
#
#      input_mapping:
#        global: [B: ":"] # the mapping specified in 'global' is applied to all keys
#
#      pad_width: 1  # width of the border between images in pixels
#      pad_value: .2  # intensity of the border pixels
#      upsampling_factor: 2  # the whole grid is upsampled by this factor
#
#      row_specs: ['H', 'S', 'B', 'V']
#      column_specs: ['W', 'C', 'D', ]
#
#      # Container visualizers always have the 'visualizers' argument. Its value has to be a list of visualizers
#      visualizers:
#
#        - IdentityVisualizer:
#            input: ['inputs', index: 1, ]
#            cmap: gray
#        - IdentityVisualizer:
#            input: ['input_ds']
#            cmap: gray
#        - PcaVisualizer:
#            input: ['mid_layer']
#
#
#  debug_depth_1:
#    ImageGridVisualizer:
#      input_mapping:
#        global: [B: ":"] # the mapping specified in 'global' is applied to all keys
#      pad_width: 1  # width of the border between images in pixels
#      pad_value: .2  # intensity of the border pixels
#      upsampling_factor: 2  # the whole grid is upsampled by this factor
#      row_specs: ['H', 'S', 'B', 'V']
#      column_specs: ['W', 'C', 'D', ]
#      # Container visualizers always have the 'visualizers' argument. Its value has to be a list of visualizers
#      visualizers:
#        - PcaVisualizer:
#            input: ['encoder_layer_depth_1']
#  debug_depth_2:
#    ImageGridVisualizer:
#      input_mapping:
#        global: [B: ":"] # the mapping specified in 'global' is applied to all keys
#      pad_width: 1  # width of the border between images in pixels
#      pad_value: .2  # intensity of the border pixels
#      upsampling_factor: 2  # the whole grid is upsampled by this factor
#      row_specs: ['H', 'S', 'B', 'V']
#      column_specs: ['W', 'C', 'D', ]
#      # Container visualizers always have the 'visualizers' argument. Its value has to be a list of visualizers
#      visualizers:
#        - PcaVisualizer:
#            input: ['encoder_layer_depth_2']
##  debug_depth_3:
##    ImageGridVisualizer:
##      input_mapping:
##        global: [B: ":"] # the mapping specified in 'global' is applied to all keys
##      pad_width: 1  # width of the border between images in pixels
##      pad_value: .2  # intensity of the border pixels
##      upsampling_factor: 2  # the whole grid is upsampled by this factor
##      row_specs: ['H', 'S', 'B', 'V']
##      column_specs: ['W', 'C', 'D', ]
##      # Container visualizers always have the 'visualizers' argument. Its value has to be a list of visualizers
##      visualizers:
##        - PcaVisualizer:
##            input: ['encoder_layer_depth_3']
#  debug_depth_base:
#    ImageGridVisualizer:
#      input_mapping:
#        global: [B: ":"] # the mapping specified in 'global' is applied to all keys
#      pad_width: 1  # width of the border between images in pixels
#      pad_value: .2  # intensity of the border pixels
#      upsampling_factor: 2  # the whole grid is upsampled by this factor
#      row_specs: ['H', 'S', 'B', 'V']
#      column_specs: ['W', 'C', 'D', ]
#      # Container visualizers always have the 'visualizers' argument. Its value has to be a list of visualizers
#      visualizers:
#        - PcaVisualizer:
#            input: ['encoder_layer_depth_base']
#
#  IoU_predictions_l0:
#    ImageGridVisualizer:
#      input_mapping:
#        global: [B: ":2", D: ":"]
#
#      pad_width: 1  # width of the border between images in pixels
#      pad_value: .2  # intensity of the border pixels
#      upsampling_factor: 5  # the whole grid is upsampled by this factor
#
#      row_specs: ['H', 'S', 'D' , ]
#      column_specs: ['W', 'B', 'C', 'V']
#
#      # Container visualizers always have the 'visualizers' argument. Its value has to be a list of visualizers
#      visualizers:
#
#        - IdentityVisualizer:
#            input: ['IoU_l0']
#            cmap: gray
#            value_range: [0,1]
#        - IdentityVisualizer:
#            input: ['IoU_targets_l0']
#            cmap: gray
#            value_range: [0,1]
#
#  IoU_predictions_l1:
#    ImageGridVisualizer:
#      input_mapping:
#        global: [B: ":2", D: ":"]
#
#      pad_width: 1  # width of the border between images in pixels
#      pad_value: .2  # intensity of the border pixels
#      upsampling_factor: 5  # the whole grid is upsampled by this factor
#
#      row_specs: ['H', 'S', 'D' , ]
#      column_specs: ['W', 'B', 'C', 'V']
#
#      # Container visualizers always have the 'visualizers' argument. Its value has to be a list of visualizers
#      visualizers:
#
#        - IdentityVisualizer:
#            input: ['IoU_l1']
#            cmap: gray
#            value_range: [0,1]
#        - IdentityVisualizer:
#            input: ['IoU_targets_l1']
#            cmap: gray
#            value_range: [0,1]
#
#
#  IoU_predictions_l2:
#    ImageGridVisualizer:
#      input_mapping:
#        global: [B: ":2", D: ":"]
#
#      pad_width: 1  # width of the border between images in pixels
#      pad_value: .2  # intensity of the border pixels
#      upsampling_factor: 5  # the whole grid is upsampled by this factor
#
#      row_specs: ['H', 'S', 'D' , ]
#      column_specs: ['W', 'B', 'C', 'V']
#
#      # Container visualizers always have the 'visualizers' argument. Its value has to be a list of visualizers
#      visualizers:
#
#        - IdentityVisualizer:
#            input: ['IoU_l2']
#            cmap: gray
#            value_range: [0,1]
#        - IdentityVisualizer:
#            input: ['IoU_targets_l2']
#            cmap: gray
#            value_range: [0,1]
#
#
#  IoU_predictions_l3:
#    ImageGridVisualizer:
#      input_mapping:
#        global: [B: ":2", D: ":"]
#
#      pad_width: 1  # width of the border between images in pixels
#      pad_value: .2  # intensity of the border pixels
#      upsampling_factor: 5  # the whole grid is upsampled by this factor
#
#      row_specs: ['H', 'S', 'D' , ]
#      column_specs: ['W', 'B', 'C', 'V']
#
#      # Container visualizers always have the 'visualizers' argument. Its value has to be a list of visualizers
#      visualizers:
#
#        - IdentityVisualizer:
#            input: ['IoU_l3']
#            cmap: gray
#            value_range: [0,1]
#        - IdentityVisualizer:
#            input: ['IoU_targets_l3']
#            cmap: gray
#            value_range: [0,1]

#  rdmPatches:
#    ImageGridVisualizer:
#      input_mapping:
#        global: [B: ":2", D: ":"]
#
#      pad_width: 1  # width of the border between images in pixels
#      pad_value: .2  # intensity of the border pixels
#      upsampling_factor: 5  # the whole grid is upsampled by this factor
#
#      row_specs: ['H', 'S', 'D', 'C', ]
#      column_specs: ['W', 'B', 'V']
#
#      # Container visualizers always have the 'visualizers' argument. Its value has to be a list of visualizers
#      visualizers:
#
#        - IdentityVisualizer:
#            input: ['ptc_trg_l0']
#            cmap: gray
#            value_range: [0,1]
#        - IdentityVisualizer:
#            input: ['ptc_pred_l0']
#            cmap: gray
#            value_range: [0,1]
#        - IdentityVisualizer:
#            input: ['ptc_trg_l1']
#            cmap: gray
#            value_range: [0,1]
#        - IdentityVisualizer:
#            input: ['ptc_pred_l1']
#            cmap: gray
#            value_range: [0,1]
#        - IdentityVisualizer:
#            input: ['ptc_trg_l2']
#            cmap: gray
#            value_range: [0,1]
#        - IdentityVisualizer:
#            input: ['ptc_pred_l2']
#            cmap: gray
#            value_range: [0,1]
#        - IdentityVisualizer:
#            input: ['ptc_trg_l3']
#            cmap: gray
#            value_range: [0,1]
#        - IdentityVisualizer:
#            input: ['ptc_pred_l3']
#            cmap: gray
#            value_range: [0,1]

