global:
  offsets: null

shortcuts:
  xy_directions: &n_directions 16
  total_directions: &tot_directions 18


device: cuda

loaders:
  general:
    volume_config:
      rejection_threshold: 0.60
      segmentation:
        affinity_config:
          retain_mask: True # This keep a mask of the valid affinities (not involving the ignore-label)
          retain_segmentation: True # This keeps the label image in the inputs
          ignore_label: 0
          nb_offsets: 1
          max_offset_range:
            - 2
            - 45
            - 45

    defect_augmentation_config:
        p_missing_slice: 0.03
        p_low_contrast: 0.03
        p_deformed_slice: 0.03
        p_artifact_source: 0.03
        deformation_mode: 'compress'
        deformation_strength: 16
        artifact_source:
            min_masking_ratio: .5
            slicing_config:
              window_size: [1, 192, 192] # 87, 141
              stride: &stride [1, 40, 40]
              downsampling_ratio: [1, 1, 1]
            volume_config:
              artifacts:
                path: '$HCI_HOME/datasets/cremi/constantin_data/sample_ABC_padded_20160501.defects.hdf'
                path_in_h5_dataset: 'defect_sections/raw'
                dtype: float32
              alpha_mask:
                path: '$HCI_HOME/datasets/cremi/constantin_data/sample_ABC_padded_20160501.defects.hdf'
                path_in_h5_dataset: 'defect_sections/mask'
            master_config:
              elastic_transform:
                alpha: 2000.
                sigma: 50.

    # Configuration for the master dataset.
    master_config:
      # We might need order 0 interpolation if we have segmentation in there somewhere.
      elastic_transform:
        apply: False
        alpha: 2000.
        sigma: 50.
        order: 0
      random_slides: False
      shape_after_slide: [87, 87]   #change to x, y of window size

      random_flip: True

      compute_directions:
        n_directions: *n_directions
        z_direction:  &z_direction True
#      crop_after_target:
#        crop_left: [0, 30, 30]
#        crop_right: [0, 30, 30]

    # Specify configuration for the loader
    loader_config:
      # Number of processes to use for loading data. Set to (say) 10 if you wish to
      # use 10 CPU cores, or to 0 if you wish to use the same process for training and
      # data-loading (generally not recommended).
      batch_size: 2
      num_workers: 5
      drop_last: True
      pin_memory: False
      shuffle: True



  train:
    names:
      - A
      - B
      - C

    # Specify how the data needs to be sliced before feeding to the network.
    # We use a 3D sliding window over the dataset to extract patches, which
    # are then fed to the network as batches.
    slicing_config:
      # Sliding window size
      window_size:
        A: &shape [5, 192, 192] # 87, 141
        B: *shape
        C: *shape
      # Sliding window stride
      stride:
        A: *stride
        B: *stride
        C: *stride
      # Data slice to iterate over.
      data_slice:
        A: ':, :, :'
        B: ':, :, :'
        C: ':75, :, :'

    # Specify paths to volumes
    volume_config:
      # Raw data
      raw:
        path:
          A: '$HCI_HOME/datasets/cremi/SOA_affinities/sampleA_train.h5'
          B: '$HCI_HOME/datasets/cremi/SOA_affinities/sampleB_train.h5'
          C: '$HCI_HOME/datasets/cremi/SOA_affinities/sampleC_train.h5'
        path_in_file:
          A: 'raw'
          B: 'raw'
          C: 'raw'
        dtype: float32
        sigma: 0.025
      # Segmentation
      segmentation:
        path:
          A: '$HCI_HOME/datasets/cremi/SOA_affinities/sampleA_train.h5'
          B: '$HCI_HOME/datasets/cremi/SOA_affinities/sampleB_train.h5'
          C: '$HCI_HOME/datasets/cremi/SOA_affinities/sampleC_train.h5'
        path_in_file:
          A: 'segmentations/groundtruth_fixed'
          B: 'segmentations/groundtruth_fixed'
          C: 'segmentations/groundtruth_fixed'
        dtype: float32



  val:
    names:
      - C

    slicing_config:
      window_size:
        C: *shape
      stride:
        C: *stride
      data_slice:
        C: '75:, :, :'

    volume_config:
      raw:
        path:
          C: '$HCI_HOME/datasets/cremi/SOA_affinities/sampleC_train.h5'
        path_in_file:
          C: 'raw'
        dtype: float32
        sigma: 0.025
      segmentation:
        path:
          C: '$HCI_HOME/datasets/cremi/SOA_affinities/sampleC_train.h5'
        path_in_file:
          C: 'segmentations/groundtruth_fixed'
        dtype: float32



model:
  embeddingutils.models.unet.FeaturePyramidUNet3D:
#    conv_type: 'conv_bn' # ConvELU3D
    in_channels: 1
#    encoder_fmaps: [80, 160, 320, 640] #[80, 160, 320, 640]
    encoder_fmaps: [50, 120, 240, 450, 550, 600] #[80, 160, 320, 640]
    pyramid_fmaps: 128
    out_channels: null
    depth: 5
    upsampling_mode: 'nearest'
    scale_factor:
      - [1, 2, 2]
      - [1, 2, 2]
      - [1, 2, 2]
      - [1, 3, 3]
      - [1, 2, 2]
    path_autoencoder_model: "$HCI_HOME/pyCharm_projects/uppsala_hackathon/experiments/cremi/runs/VAE64_3D_5_29_29_DS1_BCE_more/model.pytorch"
    AE_kwargs:
      add_residual_connections: true
      conv_type_key: "vanilla" # conv_bn
      fmap_growth: 3
      in_channels: 1
      #    out_channels: 1
      initial_num_fmaps: 16
      scale_factor:
        - [1, 1, 1]
      #      - [1, 3, 3]
      #      - [1, 1, 1]
      final_activation: Sigmoid
      latent_variable_size: 64
      patch_size: [5,15,15]

#    final_activation: 'ReLU'
#    final_activation: !Obj:Conv3D
#      import_from: inferno.extensions.layers.convolutional
#      in_channels: *tot_directions
#      out_channels: *tot_directions
#      kernel_size: 3
#    loadfrom: "$HCI_HOME/pyCharm_projects/uppsala_hackathon/experiments/cremi/runs/PyrUNetMultiScale_MeMasks_newAE/best_checkpoint.pytorch"

autoencoder:
  latent_variable_size: 128
#  path: "$HCI_HOME/pyCharm_projects/uppsala_hackathon/experiments/cremi/runs/VAE_27fc_24/model.pytorch"
#  path: "$HCI_HOME/pyCharm_projects/uppsala_hackathon/experiments/cremi/runs/Conv3DAutoEnc_Soresen_27_fc_noDownscale/model.pytorch"



trainer:
  max_epochs: 10 # basically infinite
#  TODO: increase this if we need both affinity targets and directional DT targets
  num_targets: 1

  criterion:
    # TODO: here you will be able to add the final losses (SoresenDice for affinities and L1 for DT)
    losses: null
    kwargs:
      loss_type: "Dice" # "MSE"


  metric:
    evaluate_every: 'never'
    quantizedVDT.metrics.ArandFromMWSDistances:
      strides: null # [1,2,2]
      z_direction: *z_direction
      n_directions: *n_directions

  optimizer:
    Adam:
      lr: 1.5e-5
      weight_decay: 0.0005
#      betas: [0.9, 0.999]

  intervals:
    save_every: [1000, 'iterations']
    validate_every:
      frequency : [100, 'iterations']
      for_num_iterations: 5

  tensorboard:
    log_scalars_every: [1, 'iterations']
    log_images_every: [100, 'iterations']
    log_histograms_every: 'never'
    send_image_at_batch_indices: [0]
    send_image_at_channel_indices: [0]
##    send_volume_at_z_indices: 'mid'
#    split_config_keys: True
#    log_anywhere: ['scalars']

  callbacks:
#    gradients:
#      LogOutputGradients:
#        frequency: 1

    essentials:
      SaveAtBestValidationScore:
        smoothness: 0
        verbose: True
#      GradientClip:
#        clip_value: 1e-3
      SaveModelCallback:
        save_every: 500
      PlotReconstructedCallback:
        plot_every: 100

    scheduling:
      AutoLR:
        monitor: 'validation_loss'
        factor: 0.99
        patience: '100 iterations'
        monitor_while: 'validating'
        monitor_momentum: 0.75
#        cooldown_duration: '50000 iterations'
        consider_improvement_with_respect_to: 'previous'
        verbose: True


firelight:
  UNet_AE:
    ImageGridVisualizer:

      input_mapping:
        global: [B: 0, D: ":"] # the mapping specified in 'global' is applied to all keys

      pad_width: 1  # width of the border between images in pixels
      pad_value: .2  # intensity of the border pixels
      upsampling_factor: 2  # the whole grid is upsampled by this factor

      row_specs: ['H', 'S', 'D']
      column_specs: ['W', 'C', 'B', 'V']

      # Container visualizers always have the 'visualizers' argument. Its value has to be a list of visualizers
      visualizers:

        # visualize raw input
        - IdentityVisualizer:
            input: ['inputs', index: 0, W: "::2", H: "::2"]
            cmap: gray

        - IdentityVisualizer:
            input: ['target', index: 0, C: 10, W: "::2", H: "::2"]
            cmap: gray
#        - IdentityVisualizer:
#            input: ['prediction', index: 0, B: 0, D: "1:6", C: 0]
#            cmap: gray

        - PcaVisualizer:
            input: ['prediction', index: 0, W: "::2", H: "::2"]

        - PcaVisualizer:
            input: ['prediction', index: 1]

        - PcaVisualizer:
            input: ['prediction', pre: {vaeAffs.utils.various.torch_tensor_zoom: {zoom: [1,1,1,2,2], order: 0}}, index: 2]

  ptch_l0:
    ImageGridVisualizer:
      pad_width: 1  # width of the border between images in pixels
      pad_value: .2  # intensity of the border pixels
      upsampling_factor: 5  # the whole grid is upsampled by this factor

      row_specs: ['H', 'S', 'D', 'C', 'B']
      column_specs: ['W', 'V']

      # Container visualizers always have the 'visualizers' argument. Its value has to be a list of visualizers
      visualizers:

        - IdentityVisualizer:
            input: ['ptc_trg_l0']
            cmap: gray
        - IdentityVisualizer:
            input: ['ptc_pred_l0']
            cmap: gray
        - IdentityVisualizer:
            input: ['ptc_raw_l0']
            cmap: gray
        - IdentityVisualizer:
            input: ['ptc_ign_l0']
            cmap: gray
        - IdentityVisualizer:
            input: ['ptc_pred_trg_l0']
            cmap: gray

  ptch_l1:
    ImageGridVisualizer:
      pad_width: 1  # width of the border between images in pixels
      pad_value: .2  # intensity of the border pixels
      upsampling_factor: 5  # the whole grid is upsampled by this factor

      row_specs: ['H', 'S', 'D', 'C', 'B']
      column_specs: ['W', 'V']

      # Container visualizers always have the 'visualizers' argument. Its value has to be a list of visualizers
      visualizers:

        - IdentityVisualizer:
            input: ['ptc_trg_l1']
            cmap: gray
        - IdentityVisualizer:
            input: ['ptc_pred_l1']
            cmap: gray
        - IdentityVisualizer:
            input: ['ptc_raw_l1']
            cmap: gray
        - IdentityVisualizer:
            input: ['ptc_ign_l1']
            cmap: gray
        - IdentityVisualizer:
            input: ['ptc_pred_trg_l1']
            cmap: gray


  ptch_l2:
    ImageGridVisualizer:
      pad_width: 1  # width of the border between images in pixels
      pad_value: .2  # intensity of the border pixels
      upsampling_factor: 5  # the whole grid is upsampled by this factor

      row_specs: ['H', 'S', 'D', 'C', 'B']
      column_specs: ['W', 'V']

      # Container visualizers always have the 'visualizers' argument. Its value has to be a list of visualizers
      visualizers:

        - IdentityVisualizer:
            input: ['ptc_trg_l2']
            cmap: gray
        - IdentityVisualizer:
            input: ['ptc_pred_l2']
            cmap: gray
        - IdentityVisualizer:
            input: ['ptc_raw_l2']
            cmap: gray
        - IdentityVisualizer:
            input: ['ptc_ign_l2']
            cmap: gray
        - IdentityVisualizer:
            input: ['ptc_pred_trg_l2']
            cmap: gray





