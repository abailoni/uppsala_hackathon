global:
  offsets: null


device: cuda

loaders:
  general:
    volume_config:
      rejection_threshold: 0.40
      segmentation:
        affinity_config:
          retain_mask: False # This keep a mask of the valid affinities (not involving the ignore-label)
          retain_segmentation: True # This keeps the label image in the inputs
          ignore_label: 0

    defect_augmentation_config:
        max_contiguous_defected_slices: 2
        p_missing_slice: 0.003
        p_low_contrast: 0.006
        p_deformed_slice: 0.006
        p_artifact_source: 0.01
        deformation_mode: 'compress'
        deformation_strength: 16
        artifact_source:
            min_masking_ratio: .5
            slicing_config:
              window_size: [1, 539, 539]
              stride: [1, 160, 160]
              downsampling_ratio: [1, 1, 1]
            volume_config:
              artifacts:
                path: '$HCI_HOME/datasets/cremi/constantin_data/sample_ABC_padded_20160501.defects.hdf'
                path_in_h5_dataset: 'defect_sections/raw'
                dtype: float32
              alpha_mask:
                path: '$HCI_HOME/datasets/cremi/constantin_data/sample_ABC_padded_20160501.defects.hdf'
                path_in_h5_dataset: 'defect_sections/mask'
            master_config:
              elastic_transform:
                alpha: 2000.
                sigma: 50.

    # Configuration for the master dataset.
    master_config:
      # We might need order 0 interpolation if we have segmentation in there somewhere.
      elastic_transform:
        apply: False
        alpha: 2000.
        sigma: 50.
        order: 0
      random_slides:
        shape_after_slide: [459, 459]   #change to x, y of window size [459, 459]
#        max_misalign: [30, 30]   #change to x, y of window size
        shift_vs_slide_proba: 0.5
        apply_proba: 0.5
#        apply_to: [0] #TODO: generalize if I have more inputs...

      random_flip: True

#      crop_after_target:
#        crop_left: [0, 30, 30]
#        crop_right: [0, 30, 30]
#      downscale_and_crop:
#        0:
#          ds_factor: [1, 3, 3]
#          crop_factor: [1, 1, 1]
#        1:
#          ds_factor: [1, 1, 1]
#          crop_factor: [1, 2, 2]
#          crop_slice: "3:-3, : , :"

      affinity_config:
        global:
          retain_mask: True # This keep a mask of the valid affinities (not involving the ignore-label)
          retain_segmentation: True # This keeps the label image in the inputs
          ignore_label: 0
        0:
          offsets:
            - [-1, 0, 0]
            - [0, -2, 0]
            - [0, 0, -2]
            - [0, -9, 0]
            - [0, 0, -9]
            - [0, -9, -9]
            - [0, -9, +9]
            - [0, -27, 0]
            - [0, 0, -27]
            - [0, -27, -27]
            - [0, -27, +27]
            - [0, -54, 0]
            - [0, 0, -54]
            - [-2, 0, 0]
            - [-3, 0, 0]
            - [-4, 0, 0]
#            Add respective other directions...!?! Could help the agglomeration!


    # Specify configuration for the loader
    loader_config:
      # Number of processes to use for loading data. Set to (say) 10 if you wish to
      # use 10 CPU cores, or to 0 if you wish to use the same process for training and
      # data-loading (generally not recommended).
      batch_size: 1
      num_workers: 6
      drop_last: True
      pin_memory: False
      shuffle: True



  train:
    names:
      - A
      - B
      - C

    # Specify how the data needs to be sliced before feeding to the network.
    # We use a 3D sliding window over the dataset to extract patches, which
    # are then fed to the network as batches.
    slicing_config:
      # Sliding window size
      window_size:
        A: &shape [20, 539, 539]
        B: *shape
        C: *shape
      # Sliding window stride
      stride:
        A: &stride [8, 210, 210]
        B: *stride
        C: *stride
      # Data slice to iterate over.
      data_slice:
        A: ':, :, :'
        B: ':, :, :'
        C: ':, :, :'

    # Specify paths to volumes
    volume_config:
      # Raw data
      raw:
        path:
          A: '$HCI_HOME/datasets/cremi/SOA_affinities/sampleA_train.h5'
          B: '$HCI_HOME/datasets/cremi/SOA_affinities/sampleB_train.h5'
          C: '$HCI_HOME/datasets/cremi/SOA_affinities/sampleC_train.h5'
        path_in_file:
          A: 'raw'
          B: 'raw_old'
          C: 'raw'
        dtype: float32
        sigma: 0.025
        padding_mode: "reflect"
        padding: &dataset_padding [[6,6], [120,120], [120,120]]
#        padding: &dataset_padding [[0,0], [0,0], [0,0]]

      # Segmentation
      segmentation:
        path:
          A: '$HCI_HOME/datasets/cremi/SOA_affinities/sampleA_train.h5'
          B: '$HCI_HOME/datasets/cremi/SOA_affinities/sampleB_train.h5'
          C: '$HCI_HOME/datasets/cremi/SOA_affinities/sampleC_train.h5'
        path_in_file:
          A: 'segmentations/groundtruth_fixed'
          B: 'segmentations/groundtruth_fixed_OLD'
          C: 'segmentations/groundtruth_fixed'
        dtype: float32
        padding_mode: "constant"
        padding: *dataset_padding



  val:
    names:
      - C

    slicing_config:
      window_size:
        C: *shape
      stride:
        C: *stride
      data_slice:
        C: '75:, :, :'

    volume_config:
      raw:
        path:
          C: '$HCI_HOME/datasets/cremi/SOA_affinities/sampleC_train.h5'
        path_in_file:
          C: 'raw'
        dtype: float32
        sigma: 0.025
        padding_mode: "reflect"
        padding: *dataset_padding
      segmentation:
        path:
          C: '$HCI_HOME/datasets/cremi/SOA_affinities/sampleC_train.h5'
        path_in_file:
          C: 'segmentations/groundtruth_fixed'
        dtype: float32
        padding_mode: "constant"
        padding: *dataset_padding

  infer:
    inference_mode: True
    loader_config:
      # Number of processes to use for loading data. Set to (say) 10 if you wish to
      # use 10 CPU cores, or to 0 if you wish to use the same process for training and
      # data-loading (generally not recommended).
      batch_size: 1
      num_workers: 4
      drop_last: False
      #      pin_memory: False
      shuffle: False
    name: C

    master_config:
    volume_config:
      # Sliding window size
      window_size: [32, 540, 540]  # 288
      #        A:
      #        B: *shape
      #        C: *shape
      # Sliding window stride
      stride: [40, 40, 40] # Not needed anymore, automatically deduced
      #        A:
      #        B: *stride
      #        C: *stride
      # Data slice to iterate over.
      #      data_slice: '70:100,200:800,200:800'
      #      data_slice: ":20, 90:, 580: 1900"
      data_slice: ':,:,:'

      #      padding_mode: "constant"
      #      padding:
      #        - [6,6]
      #        - [193, 193]
      #        - [193, 193]
      # PATHS:
      path:
        A: '$HCI_HOME/datasets/cremi/SOA_affinities/sampleA_train.h5'
        B: '$HCI_HOME/datasets/cremi/SOA_affinities/sampleB_train.h5'
        C: '$HCI_HOME/datasets/cremi/SOA_affinities/sampleC_train.h5'
        B+: '$HCI_HOME/datasets/cremi/testvol/test_samples/sampleB+_cropped_plus_mask.h5'
        A+: '$HCI_HOME/datasets/cremi/testvol/test_samples/sampleA+_cropped_plus_mask.h5'
        C+: '$HCI_HOME/datasets/cremi/testvol/test_samples/sampleC+_cropped_plus_mask.h5'
      path_in_file:
        A: 'raw'
        B: 'raw_old'
        C: 'raw'
        A+: "volumes/raw"
        B+: "volumes/raw"
        C+: "volumes/raw"
      dtype: float32
    #      sigma: 0.025

inference:
  crop_prediction: # How much I crop the predicted tensor: (local_crop)
    - [4,0]
    - [50,50]
    - [50,50]
  return_patch_mask: False # Make sure to exclude the invalid affinities

model:
  embeddingutils.models.unet.GeneralizedAffinitiesFromEmb:
    path_model: "$HCI_HOME/pyCharm_projects/uppsala_hackathon/experiments/cremi/runs/dim128_9_19_19_plusFrGrd_dilat_b/checkpoint.pytorch"
    nb_offsets: 16
    loadfrom: "$HCI_HOME/pyCharm_projects/uppsala_hackathon/experiments/cremi/runs/dim128_9_19_19_plusFrGrd_affs_b/checkpoint.pytorch"
    train_backbone: False
    use_ASPP_module: True
    reload_backbone: False


trainer:
  max_epochs: 1000 # basically infinite
  num_targets: 1

  criterion:
    loss_name: "vaeAffs.models.losses.StackedAffinityLoss"
    kwargs:
      loss_type: "Dice" # "MSE"
      add_borders: True


  optimizer:
    Adam:
      lr: 0.0001
      weight_decay: 0.0005
      amsgrad: True
#      betas: [0.9, 0.999]

  intervals:
    save_every: [1000, 'iterations']
    validate_every:
      frequency : [100, 'iterations']
      for_num_iterations: 5

  tensorboard:
    log_scalars_every: [1, 'iterations']
    log_images_every: [300, 'iterations']
    log_histograms_every: 'never'
    send_image_at_batch_indices: [0]
    send_image_at_channel_indices: [0]
##    send_volume_at_z_indices: 'mid'
#    split_config_keys: True
#    log_anywhere: ['scalars']

  callbacks:
#    gradients:
#      LogOutputGradients:
#        frequency: 1

    essentials:
      SaveAtBestValidationScore:
        smoothness: 0
        verbose: True
#      GradientClip:
#        clip_value: 1e-3
      SaveModelCallback:
        save_every: 500
      PlotReconstructedCallback:
        plot_every: 100

    scheduling:
      AutoLR:
        monitor: 'validation_loss'
        factor: 0.98
        patience: '100 iterations'
        monitor_while: 'validating'
        monitor_momentum: 0.75
#        cooldown_duration: '50000 iterations'
        consider_improvement_with_respect_to: 'previous'
        verbose: True


firelight:
  affinities:
    ImageGridVisualizer:

      input_mapping:
        global: [B: 0] # the mapping specified in 'global' is applied to all keys

      pad_width: 1  # width of the border between images in pixels
      pad_value: .2  # intensity of the border pixels
      upsampling_factor: 2  # the whole grid is upsampled by this factor

      row_specs: ['H', 'S',  'C', 'B', 'V']
      column_specs: ['W', 'D']

      # Container visualizers always have the 'visualizers' argument. Its value has to be a list of visualizers
      visualizers:

        ##        # visualize raw input
        ##        - IdentityVisualizer:
        ##            input: ['prediction', index: 0, B: 0, D: "1:6", C: 0]
        ##            cmap: gray
        - IdentityVisualizer:
            input: ['inputs', index: 0, W: "120:-120", H: "120:-120", D: "6:-6"]
            cmap: gray
        - PcaVisualizer:
            input: ['embeddings', ]
            n_components: 6
        - SegmentationVisualizer:
#            input: ['target', index: 0, C: 2, W: "120:-120", H: "120:-120", D: "6:-6"]
            input: ['targets_plus_border', C: 1]
            background_label: 0
        - IdentityVisualizer:
            input: ['prediction', index: 0, C: 1 ]
            cmap: gray
            value_range: [0,1]
        - IdentityVisualizer:
            input: ['prediction', index: 0, C: 3 ]
            cmap: gray
            value_range: [0,1]
        - IdentityVisualizer:
            input: ['prediction', index: 0, C: 7 ]
            cmap: gray
            value_range: [0,1]
        - IdentityVisualizer:
            input: ['prediction', index: 0, C: 8]
            cmap: gray
            value_range: [0,1]
        - IdentityVisualizer:
            input: ['prediction', index: 0, C: 11]
            cmap: gray
            value_range: [0,1]
        - IdentityVisualizer:
            input: ['prediction', index: 0, C: 13]
            cmap: gray
            value_range: [0,1]

  modelInputs:
    ImageGridVisualizer:

      input_mapping:
        global: [B: ":"] # the mapping specified in 'global' is applied to all keys

      pad_width: 1  # width of the border between images in pixels
      pad_value: .2  # intensity of the border pixels
      upsampling_factor: 1  # the whole grid is upsampled by this factor

      row_specs: ['H', 'S', 'B', 'V']
      column_specs: ['W', 'C', 'D']

      # Container visualizers always have the 'visualizers' argument. Its value has to be a list of visualizers
      visualizers:

#        # visualize raw input
        - IdentityVisualizer:
            input: ['inputs', index: 0, D: "6:-6"]
            cmap: gray
        - SegmentationVisualizer:
            input: ['target', index: 0, C: 0, D: "6:-6"]
            background_label: 0
