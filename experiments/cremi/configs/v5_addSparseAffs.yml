loaders:
  general:
    master_config:
      affinity_config:
        global:
          retain_mask: True # This keep a mask of the valid affinities (not involving the ignore-label)
          retain_segmentation: True # This keeps the label image in the inputs
          retain_extra_masks: True
          ignore_label: 0
          glia_label: 1
#          boundary_label: 2
          train_affs_on_glia: True
        0:
          offsets:
            # Short-ranges:
            - [-1, 0, 0]
            - [0, -1, 0]
            - [0, 0, -1]
            # Mid-ranges:
            - [0, -4, 0]
            - [0, 0, -4]
            - [0, -4, -4]
            - [0, 4, -4]
            - [-1, -4, 0]
            - [-1, 0, -4]
            - [-1, -4, -4]
            - [-1, 4, -4]
            # 3D-ranges:
            - [-2, 0, 0]
            - [-3, 0, 0]
            - [-4, 0, 0]
            # Long-ranges:
            - [0, -8, -8]
            - [0, 8, -8]
            - [0, -12, 0]
            - [0, 0, -12]
        1:
          offsets:
            - [-1, 0, 0]
            - [0, -2, 0]
            - [0, 0, -2]
            # 3D-ranges:
            - [-2, 0, 0]
            - [-3, 0, 0]
            - [-4, 0, 0]
            # Long-ranges:
            - [0, -7, 0]
            - [0, 0, -7]
            - [0, -7, -7]
            - [0, 7, -7]
        2:
          offsets:
            - [-1, 0, 0]
            - [0, -1, 0]
            - [0, 0, -1]
            # 3D-ranges:
            - [-2, 0, 0]
            - [-3, 0, 0]
            - [-4, 0, 0]
            # Long-ranges:
            - [0, -3, 0]
            - [0, 0, -3]
            - [0, -3, -3]
            - [0, 3, -3]

inference:
  crop_prediction: # How much I crop the predicted tensor: (local_crop in the output resolution)
    - [4,1]
    - [24,24]
    - [24,24]
  window_overlap: [3, 50, 50]
  blending_kwargs:
    dim: 3
  index_output: 2

model:
  model_kwargs:
    output_branches_specs:
      4:
        depth: 0
        out_channels: 18
        activation: "Sigmoid"
      5:
        depth: 1
        out_channels: 10
        activation: "Sigmoid"
      6:
        depth: 2
        out_channels: 10
        activation: "Sigmoid"



trainer:
  criterion:
    kwargs:
      indx_trained_patchNets: # patchNet and pred pairs #TODO: fix this mess
        - [0, 0]
        - [1, 1]
        - [2, 3]
        - [3, 5]
      sparse_affs_loss_kwargs:
        loss_type: "Dice" # "MSE"
        target_has_label_segm: True
        target_has_various_masks: True
        train_glia_mask: False

        predictions_specs:
          2:
            target: 0
            affs_channels: ":"
          4:
            target: 1
            affs_channels: ":"
          6:
            target: 2
            affs_channels: ":"

firelight:
#  pcaEmbeddings_lvl0:
#    ImageGridVisualizer:
#
#      input_mapping:
#        global: [B: ":", D: "2:7"] # the mapping specified in 'global' is applied to all keys
#      #        global: [B: ":", D: ":"] # the mapping specified in 'global' is applied to all keys
#
#      pad_width: 1  # width of the border between images in pixels
#      pad_value: .2  # intensity of the border pixels
#      upsampling_factor: 2  # the whole grid is upsampled by this factor
#
#      row_specs: ['H', 'S', 'B', 'V']
#      column_specs: ['W', 'C', 'D', ]
#
#      # Container visualizers always have the 'visualizers' argument. Its value has to be a list of visualizers
#      visualizers:
#
#        #        # visualize raw input
#        - SegmentationVisualizer:
#            input: ['target', index: 0, C: 0, W: "24:-24", H: "24:-24"]
#            background_label: 0
#        - IdentityVisualizer:
#            input: ['inputs', index: 0, W: "24:-24", H: "24:-24"]
#            cmap: gray
#        - PcaVisualizer:
#            input: ['prediction', index: 0]
#        - PcaVisualizer:
#            input: ['prediction', index: 1]
#        - PcaVisualizer:
#            input: ['prediction', index: 2]

#  pcaEmbeddings_lvl1: "KeyDeleter"
#  pcaEmbeddings_lvl2: "KeyDeleter"

  affinities:
    ImageGridVisualizer:

      input_mapping:
        global: [B: 0, D: "3:9"] # the mapping specified in 'global' is applied to all keys

      pad_width: 1  # width of the border between images in pixels
      pad_value: .2  # intensity of the border pixels
      upsampling_factor: 1  # the whole grid is upsampled by this factor

      row_specs: ['H', 'S', 'B', 'C', 'V']
      column_specs: ['W', 'D']

      visualizers:

        - SegmentationVisualizer:
            input: ['target', index: 0, C: 0, W: "24:-24", H: "24:-24"]
            background_label: 0
        - IdentityVisualizer:
            input: ['inputs', index: 0, W: "24:-24", H: "24:-24"]
            cmap: gray
        - IdentityVisualizer:
            input: ['prediction', index: 2, C: ":"]
            cmap: gray
            value_range: [0,1]

